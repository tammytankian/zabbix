zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: c2c162144c2d4c5491c8801193af4945
      name: Templates/Cloud
  templates:
    - uuid: affc0911e6904fc4b941d55e06369b3e
      template: 'Azure Service Bus by HTTP'
      name: 'Azure Service Bus by HTTP'
      groups:
        - name: Templates/Cloud
      items:
        - uuid: 862417b47d28482799c762519fb6caa0
          name: 'Abandoned Messages'
          type: DEPENDENT
          key: azure.sb.abandoned.msgs
          delay: '0'
          history: 7d
          description: 'Count of messages abandoned on a Queue/Topic.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.AbandonMessage.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: messages
        - uuid: 8569cabad0a04788abafc1856d9f1666
          name: 'Active Connections'
          type: DEPENDENT
          key: azure.sb.active.conn
          delay: '0'
          history: 7d
          description: 'Total Active Connections for Microsoft.ServiceBus.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.ActiveConnections.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: connections
        - uuid: 7d03c4e060ed4ae7816332f64a401876
          name: 'Active Messages in a Queue/Topic.'
          type: DEPENDENT
          key: azure.sb.active.msgs.queue.avg
          delay: '0'
          history: 7d
          description: 'Count of active messages in a Queue/Topic.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.ActiveMessages.average
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: messages
        - uuid: 566facd9b28c4b4fa5bd7884ae6db654
          name: 'Connections Closed'
          type: DEPENDENT
          key: azure.sb.closed.conn
          delay: '0'
          history: 7d
          description: 'Connections Closed for Microsoft.ServiceBus.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.ConnectionsClosed.average
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: connections
        - uuid: fdedb67619374b138487d46116ddfb1b
          name: 'Completed Messages'
          type: DEPENDENT
          key: azure.sb.complete.messages
          delay: '0'
          history: 7d
          description: 'Count of messages completed on a Queue/Topic.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.CompleteMessage.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: messages
        - uuid: 140b1a14cf5a4f7390faad257b4485e9
          name: 'Get data'
          type: SCRIPT
          key: azure.sb.data.get
          delay: 10m
          history: '0'
          value_type: TEXT
          trends: '0'
          params: |
            var AzureSP = {
                params: {},
                token: null,
            
                setParams: function(params) {
                    ['app_id', 'password', 'tenant_id', 'subscription_id', 'resource_id'].forEach(function(field) {
                        if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {
                            throw 'Required param is not set: ' + field + '.';
                        }
                    });
            
                    AzureSP.params = params;
                },
            
                request: function(url, data) {
                    if (typeof data === 'undefined' || data === null) {
                        data = '';
                    }
            
                    var response, request = new HttpRequest();
                    if (typeof AzureSP.params.proxy !== 'undefined' && AzureSP.params.proxy !== '') {
                        request.setProxy(AzureSP.params.proxy);
                    }
                    if (AzureSP.token) {
                        request.addHeader('Accept: application/json');
                        request.addHeader('Authorization: Bearer ' + AzureSP.token);
                    }
            
                    Zabbix.log(4, '[ Azure ] Sending request: ' + url);
            
                    if (data !== '') {
                        request.addHeader('Content-Type: application/x-www-form-urlencoded');
                        response = request.post(url, data);
                    } else {
                        response = request.get(url);
                    }
            
                    Zabbix.log(4, '[ Azure ] Received response with status code ' + request.getStatus() + ': ' + response);
            
                    if (request.getStatus() !== 200 || response === null) {
                        throw 'Request failed with status code ' + request.getStatus() + ': ' + response;
                    }
            
                    try {
                        return JSON.parse(response);
                    } catch (error) {
                        throw 'Failed to parse response received from API.';
                    }
                }
            };
            
            var data = {};
            data['errors'] = {};
            data['metrics'] = {};
            
            try {
                AzureSP.setParams(JSON.parse(value));
            
                try {
                    result = AzureSP.request(
                        'https://login.microsoftonline.com/' + encodeURIComponent(AzureSP.params.tenant_id) + '/oauth2/token',
                        'grant_type=client_credentials&resource=' + encodeURIComponent('https://management.azure.com/') + '&client_id=' + encodeURIComponent(AzureSP.params.app_id) + '&client_secret=' + encodeURIComponent(AzureSP.params.password)
                    );
            
                    if ('access_token' in result) {
                        AzureSP.token = result['access_token'];
                    } else {
                        throw 'Auth response does not contain access token.';
                    }
                } catch (error) {
                    data.errors.auth = error.toString();
                }
            
                if (!('auth' in data.errors)) {
                    try {
                        var health = AzureSP.request('https://management.azure.com' + AzureSP.params.resource_id + '/providers/Microsoft.ResourceHealth/availabilityStatuses?api-version=2020-05-01');
                        if ('value' in health && Array.isArray(health.value) && health.value.length > 0 && 'properties' in health.value[0] && typeof health.value[0].properties === 'object') {
                            data.health = health.value[0].properties;
                        }
                    } catch (error) {
                        data.errors.health = error.toString();
                    }
            
                    try {
                        var metricsList = AzureSP.request('https://management.azure.com' + AzureSP.params.resource_id + '/providers/Microsoft.Insights/metricDefinitions?api-version=2021-05-01');
            
                        if ('value' in metricsList && Array.isArray(metricsList.value) && metricsList.value.length > 0) {
                            var metrics = metricsList.value.map(function(metric) {
                                return metric.name.value;
                            });
            
                            var prepared_metrics = [];
                            for (var i = 0; i < metrics.length; i += 20) {
                                var chunk = metrics.slice(i, i + 20);
                                prepared_metrics.push(
                                    chunk.map(function(element) {
                                        return encodeURIComponent(element);
                                    }).join(',')
                                );
                            }
            
                            var start_date = new Date((new Date().getTime()) - 300000).toISOString().replace(/\.\d+/, '');
                            var end_date = new Date().toISOString().replace(/\.\d+/, '');
            
                            for (var j in prepared_metrics) {
                                try {
                                    var metrics_data = AzureSP.request('https://management.azure.com' + AzureSP.params.resource_id + '/providers/Microsoft.Insights/metrics?metricnames=' + prepared_metrics[j] + '&timespan=' + encodeURIComponent(start_date) + '/' + encodeURIComponent(end_date) + '&api-version=2021-05-01');
                                    if ('value' in metrics_data && Array.isArray(metrics_data.value) && metrics_data.value.length > 0) {
                                        for (var k in metrics_data.value) {
                                            if ('name' in metrics_data.value[k] && typeof metrics_data.value[k].name === 'object' && 'value' in metrics_data.value[k].name && typeof metrics_data.value[k].name.value === 'string' && 'timeseries' in metrics_data.value[k] && Array.isArray(metrics_data.value[k].timeseries) && metrics_data.value[k].timeseries.length > 0 && 'data' in metrics_data.value[k].timeseries[0] && Array.isArray(metrics_data.value[k].timeseries[0].data) && metrics_data.value[k].timeseries[0].data.length > 0) {
                                                data.metrics[metrics_data.value[k].name.value.replace(/(\s|\/)+/g, '')] = metrics_data.value[k].timeseries[0].data[metrics_data.value[k].timeseries[0].data.length - 1];
                                            }
                                        }
                                    }
                                } catch (error) {
                                    data.errors[prepared_metrics[j]] = error.toString();
                                }
                            }
                        }
                    } catch (error) {
                        data.errors.metricsList = error.toString();
                    }
                }
            } catch (error) {
                data.errors.params = error.toString();
            }
            
            if (Object.keys(data.errors).length !== 0) {
                var errors = 'Failed to receive data:';
                for (var error in data.errors) {
                    errors += '\n' + error + ' : ' + data.errors[error];
                }
                data.errors = errors;
            } else {
                data.errors = '';
            }
            
            return JSON.stringify(data);
          description: 'The result of API requests is expressed in the JSON.'
          timeout: '{$AZURE.DATA.TIMEOUT}'
          parameters:
            - name: app_id
              value: '{$AZURE.APP.ID}'
            - name: password
              value: '{$AZURE.PASSWORD}'
            - name: proxy
              value: '{$AZURE.PROXY}'
            - name: resource_id
              value: '{$AZURE.RESOURCE.ID}'
            - name: subscription_id
              value: '{$AZURE.SUBSCRIPTION.ID}'
            - name: tenant_id
              value: '{$AZURE.TENANT.ID}'
          tags:
            - tag: component
              value: 'api request'
        - uuid: 95a3f661dfd5442abb8932f00465cea4
          name: 'Dead-Lettered Messages in a Queue/Topic'
          type: DEPENDENT
          key: azure.sb.dead.lettered.queue.avg
          delay: '0'
          history: 7d
          description: 'Count of dead-lettered messages in a Queue/Topic.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.DeadletteredMessages.average
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: messages
        - uuid: 26c7f4359aaa4f88abd52df4489ff3a9
          name: 'Server Errors'
          type: DEPENDENT
          key: azure.sb.errors
          delay: '0'
          history: 7d
          description: 'Server Errors for Microsoft.ServiceBus.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.ServerErrors.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: server
        - uuid: 411e3813edf64ee596c262ed7fa81dad
          name: 'Incoming Messages'
          type: DEPENDENT
          key: azure.sb.incoming.msgs
          delay: '0'
          history: 7d
          description: 'Incoming Messages for Microsoft.ServiceBus.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.IncomingMessages.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: messages
        - uuid: f499e95c949c4c6bb9550574a06c39da
          name: 'Incoming Requests'
          type: DEPENDENT
          key: azure.sb.incoming.requests
          delay: '0'
          history: 7d
          description: 'Incoming Requests for Microsoft.ServiceBus.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.IncomingRequests.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: requests
        - uuid: 06e98a928af54fdc82ed09691b0e0948
          name: 'Server Send Latency'
          type: DEPENDENT
          key: azure.sb.latency.msgs
          delay: '0'
          history: 7d
          units: ms
          description: 'Latency of Send Message operations for Service Bus resources'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.ServerSendLatency.average
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: messages
            - tag: component
              value: server
        - uuid: 5491a4302043499881d910c84be52ce6
          name: 'Connections Opened'
          type: DEPENDENT
          key: azure.sb.opened.conn
          delay: '0'
          history: 7d
          description: 'Connections Opened for Microsoft.ServiceBus.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.ConnectionsOpened.average
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: connections
        - uuid: 72bef6cac2994a83966e62679b47eec6
          name: 'Outgoing Messages'
          type: DEPENDENT
          key: azure.sb.outgoing.msgs
          delay: '0'
          history: 7d
          description: 'Outgoing Messages for Microsoft.ServiceBus.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.OutgoingMessages.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: messages
        - uuid: 3b42207882024d39969024eb27f5b96a
          name: 'Pending Checkpoint Operations'
          type: DEPENDENT
          key: azure.sb.pending.check.op
          delay: '0'
          history: 7d
          description: 'Pending Checkpoint Operations Count.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.PendingCheckpointOperationCount.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: operations
        - uuid: 2c8e8a3249c6489696333aa817fd2f4d
          name: 'Average Queue Size'
          type: DEPENDENT
          key: azure.sb.queue.size.avg
          delay: '0'
          history: 7d
          units: B
          description: 'Size of an Queue/Topic in Bytes.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.Size.average
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: queue
        - uuid: dd3cbcbc568542ca8a5dfaeac230e004
          name: 'Replication Lag Queue'
          type: DEPENDENT
          key: azure.sb.replica.lag.queue
          delay: '0'
          history: 7d
          description: 'Replication lag by message count'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.ReplicationLagCount.average
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: replica
        - uuid: 793316d74bd5415b8915e8eea8ba3995
          name: 'Replication Lag Duration'
          type: DEPENDENT
          key: azure.sb.replica.lag.time
          delay: '0'
          history: 7d
          units: s
          description: 'Replication lag by time duration'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.ReplicationLagDuration.average
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: replica
        - uuid: c3125eb4e3754fd3b94558de00ead4c2
          name: 'Scheduled Messages in a Queue/Topic.'
          type: DEPENDENT
          key: azure.sb.scheduled.msgs.queue.avg
          delay: '0'
          history: 7d
          description: 'Count of scheduled messages in a Queue/Topic.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.ScheduledMessages.average
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: messages
        - uuid: 01de13eb17434247b1383a4c6f4cefc9
          name: 'Successful Requests'
          type: DEPENDENT
          key: azure.sb.success.requests
          delay: '0'
          history: 7d
          description: 'Total successful requests for a namespace'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.SuccessfulRequests.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: requests
        - uuid: a49c6cbfdcfe44b88ef0f21e8c2367be
          name: 'Throttled Requests'
          type: DEPENDENT
          key: azure.sb.throttled.requests
          delay: '0'
          history: 7d
          description: 'Throttled Requests for Microsoft.ServiceBus'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.ThrottledRequests.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: requests
        - uuid: e80dbc358ab741509d4b3d48956becc0
          name: 'Total Messages in a Queue/Topic.'
          type: DEPENDENT
          key: azure.sb.total.msgs.queue.avg
          delay: '0'
          history: 7d
          description: 'Count of messages in a Queue/Topic.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.Messages.average
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: messages
        - uuid: 038778dec5e048e2a2b504b9bdca5f57
          name: 'User Errors'
          type: DEPENDENT
          key: azure.sb.user.errors
          delay: '0'
          history: 7d
          description: 'User Errors for Microsoft.ServiceBus'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.metrics.UserErrors.total
          master_item:
            key: azure.sb.data.get
          tags:
            - tag: component
              value: server
        - uuid: fd029394a98d4a6db3bb621adb9d09c5
          name: 'Get Queue Data'
          type: SCRIPT
          key: get.queue.data
          delay: 10m
          history: '0'
          value_type: TEXT
          trends: '0'
          params: |
            var Azure = {
                params: {},
                token: null,
            
                setParams: function (params) {
                    ['app_id', 'password', 'tenant_id', 'subscription_id', 'resource_group', 'namespace_name'].forEach(function (field) {
                        if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {
                            throw 'Required param is not set: ' + field + '.';
                        }
                    });
            
                    Azure.params = params;
                },
            
                request: function (url, data) {
                    if (typeof data === 'undefined' || data === null) {
                        data = '';
                    }
                    var response, request = new HttpRequest();
                    if (typeof Azure.params.proxy !== 'undefined' && Azure.params.proxy !== '') {
                        request.setProxy(Azure.params.proxy);
                    }
                    if (Azure.token) {
                        request.addHeader('Accept: application/json');
                        request.addHeader('Authorization: Bearer ' + Azure.token);
                    }
            
                    Zabbix.log(4, '[ Azure ] Sending request: ' + url);
            
                    if (data !== '') {
                        request.addHeader('Content-Type: application/x-www-form-urlencoded');
                        response = request.post(url, data);
                    }
                    else {
                        response = request.get(url);
                    }
            
                    Zabbix.log(4, '[ Azure ] Received response with status code ' + request.getStatus() + ': ' + response);
            
                    if (request.getStatus() !== 200 || response === null) {
                        throw 'Request failed with status code ' + request.getStatus() + ': ' + response;
                    }
            
                    try {
                        return JSON.parse(response);
                    }
                    catch (error) {
                        throw 'Failed to parse response received from API.';
                    }
                },
            
                nextlink: function (data) {
                    var next_data = data;
                    while ('nextLink' in next_data) {
                        next_data = Azure.request(next_data.nextLink);
                        next_data.value.forEach(function (value) {
                            data.value.push(value);
                        });
                    }
            
                    return data;
                }
            };
            
            var result,
                data = { queues: { value: [] }, errors: {} };
            
            try {
                Azure.setParams(JSON.parse(value));
            
                try {
                    // Request OAuth token
                    result = Azure.request(
                        'https://login.microsoftonline.com/' + encodeURIComponent(Azure.params.tenant_id) + '/oauth2/v2.0/token',
                        'grant_type=client_credentials&scope=https://management.azure.com/.default&client_id=' + encodeURIComponent(Azure.params.app_id) + '&client_secret=' + encodeURIComponent(Azure.params.password)
                    );
            
                    if ('access_token' in result) {
                        Azure.token = result['access_token'];
                    } else {
                        throw 'Auth response does not contain access token.';
                    }
                }
                catch (error) {
                    data.errors.auth = error.toString();
                }
            
                if (!('auth' in data.errors)) {
                    try {
                        // Get all Service Bus queues
                        var url = 'https://management.azure.com/subscriptions/' + encodeURIComponent(Azure.params.subscription_id) +
                                  '/resourceGroups/' + encodeURIComponent(Azure.params.resource_group) +
                                  '/providers/Microsoft.ServiceBus/namespaces/' + encodeURIComponent(Azure.params.namespace_name) +
                                  '/queues?api-version=2023-01-01-preview';
            
                        var raw_data = Azure.request(url);
            
                        if ('nextLink' in raw_data) {
                            raw_data = Azure.nextlink(raw_data);
                        }
            
                        raw_data.value.forEach(function (queue) {
                            data.queues.value.push(queue);
                        });
                    }
                    catch (error) {
                        data.errors.queues = error.toString();
                    }
                }
            }
            catch (error) {
                data.errors.params = error.toString();
            }
            
            if (Object.keys(data.errors).length !== 0) {
                var errors = 'Failed to receive data:';
                for (var error in data.errors) {
                    errors += '\n' + error + ' : ' + data.errors[error];
                }
                data.errors = errors;
            }
            else {
                data.errors = '';
            }
            
            return JSON.stringify(data);
          timeout: 30s
          parameters:
            - name: app_id
              value: '{$AZURE.APP.ID}'
            - name: namespace_name
              value: '{$NAME}'
            - name: password
              value: '{$AZURE.PASSWORD}'
            - name: resource_group
              value: '{$GROUP}'
            - name: subscription_id
              value: '{$AZURE.SUBSCRIPTION.ID}'
            - name: tenant_id
              value: '{$AZURE.TENANT.ID}'
      discovery_rules:
        - uuid: 28db2602c0174095a6a937500adb3666
          name: 'Queue discovery'
          type: DEPENDENT
          key: get.sb.queues
          delay: '0'
          item_prototypes:
            - uuid: de94d07082c84aa68b8a11cc5ddf76d3
              name: 'Active Messages in Queue - {#NAME}'
              type: DEPENDENT
              key: 'active.queue.count[{#NAME}]'
              delay: '0'
              description: 'Number of active messages in the queue, topic, or subscription.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.countDetails.activeMessageCount.first()'
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: 54d9e3bc54c84611ac9a2820c59e8a02
              name: 'Dead Letter Messages in Queue - {#NAME}'
              type: DEPENDENT
              key: 'dead.letter.queue.count[{#NAME}]'
              delay: '0'
              description: 'Number of messages that are dead lettered.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.countDetails.deadLetterMessageCount.first()'
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: a7c1342bb7504ac7a919a6e15c803486
              name: 'Messages Transfered to Deadletter - {#NAME}'
              type: DEPENDENT
              key: 'deadletter.transfer.queue.count[{#NAME}]'
              delay: '0'
              description: 'Number of messages transferred into dead letters.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.countDetails.transferDeadLetterMessageCount.first()'
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: b9853931e3fd48fa8d8b9d9651880b73
              name: 'Time idle before deleting - {#NAME}'
              type: DEPENDENT
              key: 'idle.autodelete[{#NAME}]'
              delay: '0'
              units: s
              description: 'ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.autoDeleteOnIdle.first()'
                - type: JAVASCRIPT
                  parameters:
                    - |
                      // Function to parse ISO 8601 duration and convert to seconds
                      function parseDurationToSeconds(duration) {
                          // Regular expression to match and parse the duration
                          var regex = /^P(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)D)?T?(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?$/;
                          var match = duration.match(regex);
                      
                          if (!match) {
                              return null; // Use null to indicate an invalid duration
                          }
                      
                          var years = parseInt(match[1] || '0', 10);
                          var months = parseInt(match[2] || '0', 10);
                          var days = parseInt(match[3] || '0', 10);
                          var hours = parseInt(match[4] || '0', 10);
                          var minutes = parseInt(match[5] || '0', 10);
                          var seconds = parseFloat(match[6] || '0');
                      
                          // Constants for time conversions
                          const SECONDS_IN_MINUTE = 60;
                          const SECONDS_IN_HOUR = SECONDS_IN_MINUTE * 60;
                          const SECONDS_IN_DAY = SECONDS_IN_HOUR * 24;
                          const SECONDS_IN_MONTH = SECONDS_IN_DAY * 30; // Approximate
                          const SECONDS_IN_YEAR = SECONDS_IN_DAY * 365; // Approximate
                      
                          // Calculate total seconds
                          var totalSeconds = 0;
                          totalSeconds += years * SECONDS_IN_YEAR;
                          totalSeconds += months * SECONDS_IN_MONTH;
                          totalSeconds += days * SECONDS_IN_DAY;
                          totalSeconds += hours * SECONDS_IN_HOUR;
                          totalSeconds += minutes * SECONDS_IN_MINUTE;
                          totalSeconds += seconds;
                      
                          return totalSeconds;
                      }
                      
                      // Main processing block
                      if (typeof value === 'string' && value.trim() !== '') {
                          var duration = value.trim();
                          var totalSeconds = parseDurationToSeconds(duration);
                          return totalSeconds;
                      } else {
                          return null; // Use null to indicate no valid value
                      }
                      
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 12h
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: 3545b35be88d454aa43ab32b7d617fa5
              name: 'Queue Lock Duration - {#NAME}'
              type: DEPENDENT
              key: 'lock.time[{#NAME}]'
              delay: '0'
              units: m
              description: 'ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.lockDuration.first()'
                - type: REGEX
                  parameters:
                    - \d+
                    - \0
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: aa7d0cb86c9d4e2f9f5bbe1aa123c668
              name: 'Max Delivery Count - {#NAME}'
              type: DEPENDENT
              key: 'max.delivery.count[{#NAME}]'
              delay: '0'
              description: 'The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.maxDeliveryCount.first()'
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: e8355509100944b6b5a8d2676b0bcf2e
              name: 'Max Message Size - {#NAME}'
              type: DEPENDENT
              key: 'max.msg.size[{#NAME}]'
              delay: '0'
              units: kB
              description: 'Maximum size (in KB) of the message payload that can be accepted by the queue. This property is only used in Premium today and default is 1024.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.maxSizeInMegabytes.first()'
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: bdbadac198a94bf1a1b6189175f190c6
              name: 'Max Queue Size - {#NAME}'
              type: DEPENDENT
              key: 'max.queue.size[{#NAME}]'
              delay: '0'
              units: MB
              description: 'The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.maxSizeInMegabytes.first()'
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: 701b477fb11f48b3856b3504e03acd59
              name: 'Messages in Queue - {#NAME}'
              type: DEPENDENT
              key: 'queue.count[{#NAME}]'
              delay: '0'
              description: 'The number of messages in the queue.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.messageCount.first()'
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: 96539872ab924c6cb765d3552d9bce1c
              name: 'Queue Size - {#NAME}'
              type: DEPENDENT
              key: 'queue.size[{#NAME}]'
              delay: '0'
              units: B
              description: 'The size of the queue, in bytes.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.sizeInBytes.first()'
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: 95bfe936dc024abbbe73ceb8b7f7c256
              name: 'Queue Status - {#NAME}'
              type: DEPENDENT
              key: 'queue.status[{#NAME}]'
              delay: '0'
              description: 'Entity status'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.status.first()'
                - type: STR_REPLACE
                  parameters:
                    - Unknown
                    - '0'
                - type: STR_REPLACE
                  parameters:
                    - Active
                    - '1'
                - type: STR_REPLACE
                  parameters:
                    - Creating
                    - '2'
                - type: STR_REPLACE
                  parameters:
                    - Deleting
                    - '3'
                - type: STR_REPLACE
                  parameters:
                    - Disabled
                    - '4'
                - type: IN_RANGE
                  parameters:
                    - '0'
                    - '4'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: addb4acd351f42d297bddf82ffa4334e
              name: 'Scheduled Messages in Queue - {#NAME}'
              type: DEPENDENT
              key: 'scheduled.queue.count[{#NAME}]'
              delay: '0'
              description: 'Number of scheduled messages.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.countDetails.scheduledMessageCount.first()'
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
            - uuid: 866f2b2a3f574d5b9b824c7357bdc01a
              name: 'Messages Transfered to another Queue - {#NAME}'
              type: DEPENDENT
              key: 'transfer.queue.count[{#NAME}]'
              delay: '0'
              description: 'Number of messages transferred to another queue, topic, or subscription.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$..[?(@.name == ''{#NAME}'')].properties.countDetails.transferMessageCount.first()'
              master_item:
                key: get.queue.data
              tags:
                - tag: 'batch enabled'
                  value: '{#BATCH.OP}'
                - tag: queue
                  value: '{#NAME}'
          master_item:
            key: get.queue.data
          lld_macro_paths:
            - lld_macro: '{#BATCH.OP}'
              path: $.properties.enableBatchedOperations
            - lld_macro: '{#ID}'
              path: $.id
            - lld_macro: '{#LOCATION}'
              path: $.location
            - lld_macro: '{#NAME}'
              path: $.name
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.queues.value
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
      tags:
        - tag: datasource
          value: azure
        - tag: resource
          value: 'service bus'
        - tag: type
          value: http
        - tag: version
          value: '3'
      macros:
        - macro: '{$AZURE.APP.ID}'
          description: 'The App ID of Microsoft Azure.'
        - macro: '{$AZURE.DATA.TIMEOUT}'
          value: 30s
          description: 'A response timeout for API.'
        - macro: '{$AZURE.PASSWORD}'
          description: 'Microsoft Azure password.'
        - macro: '{$AZURE.PROXY}'
          description: 'Sets HTTP proxy value. If this macro is empty then no proxy is used.'
        - macro: '{$AZURE.RESOURCE.ID}'
          description: 'Microsoft Azure virtual machine ID.'
        - macro: '{$AZURE.SUBSCRIPTION.ID}'
          description: 'Microsoft Azure subscription ID.'
        - macro: '{$AZURE.TENANT.ID}'
          description: 'Microsoft Azure tenant ID.'
        - macro: '{$NAME}'
          description: 'Service Bus Name'
        - macro: '{$GROUP}'
          description: 'Service Bus Resource Group'
        - macro: '{$AZURE.RESOURCE.ID}'
          description: 'Microsoft Azure resource ID.'
